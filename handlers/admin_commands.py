from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from db.db import get_db
from db.models import Role
from db.repositories.users import UserRepository
from decorators.role_check import require_role


@require_role(Role.ADMIN)
async def start_create_attraction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["creating_attraction"] = {"step": 1}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


@require_role(Role.ADMIN)
async def start_create_restaurant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["creating_restaurant"] = {"step": 1}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–ª–∏ –∫–∞—Ñ–µ")


@require_role(Role.ADMIN)
async def make_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /make_admin <user_id>"
        )
        return

    try:
        target_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    async with get_db() as session:
        repo = UserRepository(session)
        target_user = await repo.get_by_telegram_id(target_id)
        if not target_user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        updated_user = await repo.update_role(target_id, Role.ADMIN)

        if updated_user:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{updated_user.username or updated_user.first_name} "
                f"(ID: {updated_user.telegram_id}) —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@require_role(Role.ADMIN)
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_db() as session:
        repo = UserRepository(session)

        total_users = await repo.get_user_count()
        active_users = await repo.get_active_users_count()
        new_users = await repo.get_new_users_count()
        users_by_roles = await repo.get_users_by_roles()

        roles_stats = "\n".join(
            f"‚Ä¢ {Role(role).value}: {count}" for role, count in users_by_roles.items()
        )

        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b> (–Ω–∞ {current_date})\n\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π):</b> {active_users}\n"
            f"üÜï <b>–ù–æ–≤—ã—Ö (7 –¥–Ω–µ–π):</b> {new_users}\n\n"
            f"üëë <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:</b>\n{roles_stats}"
        )

        await update.message.reply_html(message)


@require_role(Role.ADMIN)
async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã</b>:

‚Ä¢ <code>/make_admin [user_id]</code> - –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ <code>/stats</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
‚Ä¢ <code>/add_attraction</code> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ <code>/add_restaurant</code> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
"""
    await update.message.reply_html(help_text)
