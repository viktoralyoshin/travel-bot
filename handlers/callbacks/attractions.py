import os
from telegram import InlineKeyboardButton, InputMediaPhoto, Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from db.db import get_db
from db.repositories.attractions import AttractionRepository
from keyboards.main import get_back_to_menu_button

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ATTRACTIONS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


async def attractions_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data (–µ—Å–ª–∏ –µ—Å—Ç—å)
    page = (
        int(context.args[0])
        if (hasattr(context, "args") and context.args and context.args[0].isdigit())
        else 0
    )

    photo_path = os.path.join("assets", "images", "attractions.webp")

    try:
        async with get_db() as session:
            repo = AttractionRepository(session)
            all_attractions = await repo.get_all(sort_by_rating=True)

            if not all_attractions:
                await query.edit_message_media(
                    media=InputMediaPhoto(
                        media=open(photo_path, "rb"),
                        caption="üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π",
                    ),
                    reply_markup=InlineKeyboardMarkup([get_back_to_menu_button()]),
                )
                return

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            total_pages = (
                len(all_attractions) + ATTRACTIONS_PER_PAGE - 1
            ) // ATTRACTIONS_PER_PAGE
            current_page = min(
                page, total_pages - 1
            )  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            start_idx = current_page * ATTRACTIONS_PER_PAGE
            end_idx = start_idx + ATTRACTIONS_PER_PAGE
            attractions = all_attractions[start_idx:end_idx]

            text = (
                f"üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}):\n\n"
                + "\n".join(
                    f"{idx+1+start_idx}. {attr.name}"
                    for idx, attr in enumerate(attractions)
                )
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
            attractions_buttons = [
                [
                    InlineKeyboardButton(
                        f"{attr.name} {attr.rating}‚≠ê",
                        callback_data=f"attraction_{attr.id}",
                    )
                ]
                for attr in attractions
            ]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            pagination_buttons = []
            if total_pages > 1:
                row = []
                if current_page > 0:
                    row.append(
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                            callback_data=f"attractions_page_{current_page - 1}",
                        )
                    )
                if current_page < total_pages - 1:
                    row.append(
                        InlineKeyboardButton(
                            "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                            callback_data=f"attractions_page_{current_page + 1}",
                        )
                    )
                if row:
                    pagination_buttons.append(row)

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = (
                attractions_buttons + pagination_buttons + [get_back_to_menu_button()]
            )

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_media(
                media=InputMediaPhoto(media=open(photo_path, "rb"), caption=text),
                reply_markup=reply_markup,
            )

    except Exception as e:
        print(f"Error in attractions_callback: {e}")
        await query.edit_message_media(
            media=InputMediaPhoto(
                media=open(photo_path, "rb"),
                caption="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö",
            ),
            reply_markup=InlineKeyboardMarkup([[get_back_to_menu_button()]]),
        )
